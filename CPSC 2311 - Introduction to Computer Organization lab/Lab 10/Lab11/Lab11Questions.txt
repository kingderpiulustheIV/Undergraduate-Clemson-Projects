Sean Farrell Section 5
CPSC 2310 Spring 24
Lab 11 Questions

1. As discussed in the lab writeup, the locations for min and max are
	-8(%rbq) and -4(%rbq), which are 4 apart. How far apart would these
	addresses be if min and max were chars instead of ints? Why?
	What if they were doubles?
	(You can test this)

	Min and max are 4 apart due to an int being 4 bytes in C being declared sequentially in the stack.
	The same would be for chars but 1 byte instead of 4 and 8 bytes for doubles respectively.

2. Alter the values assigned to min and max in the driver.s file
	| min | max | result
	=======================
	| 0   | 10  |012345678910
	| 5   | 10  |012345678910
	| 10  | 0   |0
	| -5  | 1   |01

3. What are these lines doing in driver.s?

	movl  -8(%rbp), %eax # min, tmp89
   	movl  %eax, -12(%rbp)   # tmp89, i
First line moves a long from an offset of -8 bytes from the base pointer to eax register.
The second line stores the same value to another variable I at a offset of -12 bytes from the base pointer.

4. What happens when you change the jump conditional to jl instead of jle?
	What if you change it to jg? Why?
	IF you change Jle to Jl the assembly code will jump if only less than instead of less
	than or equal to removing an iteration sequence of a loop.
	If I change it to jg it will make a condition where it will only jump if its greater than.



5. The last line in .L3 handles the for loop change (i++)
   The third line in .L2  handles the for loop conditional (i < max)
(The first two lines in .L2 handle the initialization, but we won't alter that)

Fill in the resulting loop and print out when we change the x86 commands
(*some of these create infinite loops so testing directly may take awhile,
try to logic through it first. If there is an infinite loop, write "infinite
loop" as the printout)

	.L3         | .L2  |        for loop             |    printout
===========================================================================
addl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i++) | 0 1 3 4....10
subl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i--) | infinite loop
addl  $2, -12(%rbp) | jl   | for(i = min; i <  max; i+=2) | 0 2 4 6 8
mull  $2, -12(%rbp) | jge  | for(i = min; i >= max; i*2) | Error: number of operands mismatch for `mul'
addl  $1, -8(%rbp)  | jle  | for(i = min; i <= max; i+=0) | infinite loop prints all 0's


6. lsl r4, r3, #2 is the same as r4 = 4 * r3. Explain
			lsl is the operator in assembly that does a left bit shift operation to the data.
			The first argument tells it to shift by how many bits to the left, while the second argument is the content to be shifted.
			r4 value is 4 so it left shifts the value in r3 by 4 which is equivalent to 4 * r3.


   ldr r5, [r0, r4] is the same as r5 = arr[i] in this case. How does this work
	 		ldr is the operand that loads value into a register. The first argument is what register it will be stored into which is r5.
	 		The brackets signify its an array variable with r0 being the start of the array, and r4 being the index of the element to be stored for r5 which is index i.
	 		Therefore ldr r5, [r0, r4] is the same as r5 = arr[i].


7. In the beginning of a function in ARM, we push lr onto the stack. At the
   end, we pop that value into pc. Why is this important? What does it
   accomplish?
	 		lr in ARM assembly returns address of when function call is completed. pushing lr to a register at the beginning of a function preservers the return address of the function.
	 		This allows the function to return to the correct location of the code once the function execution is completed. PC in ARM assembly is the program counter, that contains the
			address of the currently executed instructions of the program. Popping that value into pc guarantees proper execution flow of the program to resume in main right after in main where it left off to execute a function call.
			In turn the program process the main code then process the function call and returns the address back to the main program once its completed and executes rest of the code in main.
			This important as it maintains the correct order flow of how a program is executed in an ARM computer.
